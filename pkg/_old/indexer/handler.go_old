package main

import (
	"context"
	"net/http"
	"regexp"

	// Modules
	. "github.com/mutablelogic/go-server"
	router "github.com/mutablelogic/go-server/pkg/httprouter"
)

///////////////////////////////////////////////////////////////////////////////
// TYPES

type IndexResponse struct {
	Name  string `json:"name"`
	Path  string `json:"path"`
	Count int64  `json:"count"`
}

///////////////////////////////////////////////////////////////////////////////
// ROUTES

var (
	reRouteIndexes = regexp.MustCompile(`^/?$`)
	reRouteIndex   = regexp.MustCompile(`^/([A-Za-z0-9-_]+)/?$`)
)

///////////////////////////////////////////////////////////////////////////////
// LIFECYCLE

func (this *plugin) AddHandlers(ctx context.Context, provider Provider) error {
	// Add handler for returning all the indexes
	if err := provider.AddHandlerFuncEx(ctx, reRouteIndexes, this.ServeIndexes); err != nil {
		provider.Print(ctx, "Failed to add handler: ", err)
		return nil
	}
	// Add handler for querying a specific index
	if err := provider.AddHandlerFuncEx(ctx, reRouteIndex, this.ServeIndex); err != nil {
		provider.Print(ctx, "Failed to add handler: ", err)
		return nil
	}

	// Return success
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// HANDLERS

func (this *plugin) ServeIndexes(w http.ResponseWriter, req *http.Request) {
	response := []IndexResponse{
		{
			Name: this.Indexer.Name(),
			Path: this.Indexer.Path(),
		},
	}
	router.ServeJSON(w, response, http.StatusOK, 2)
}

func (this *plugin) ServeIndex(w http.ResponseWriter, req *http.Request) {
	params := router.RequestParams(req)
	router.ServeJSON(w, params, http.StatusOK, 2)
}
